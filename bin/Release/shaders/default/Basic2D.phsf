#shader vertex
#version 330 core

layout (location = 0) in vec3 position; // The position variable has attribute position 0
layout (location = 1) in vec2 uv;
layout (location = 2) in float tid;
layout (location = 3) in vec4 color;	// The color variable has attribute position 3

uniform mat4 sys_ProjectionMatrix;
uniform mat4 sys_ViewMatrix = mat4(1.0);
uniform mat4 sys_ModelMatrix = mat4(1.0);

out DATA
{
	vec4 position;
	vec2 uv;
	float tid;
	vec4 color;
} vs_out;

void main()
{
    gl_Position = sys_ProjectionMatrix * sys_ViewMatrix * sys_ModelMatrix * vec4(position, 1.0);
	vs_out.position = sys_ModelMatrix * vec4(position, 1.0);
	vs_out.uv = uv;
	vs_out.tid = tid;
	vs_out.color = color;
}

#shader fragment
#version 330 core

uniform vec2 light_position;
uniform bool light_on = false;

in DATA
{
	vec4 position;
	vec2 uv;
	float tid;
	vec4 color;
} fs_in;

uniform sampler2D textures[32];

void main()
{
	float intensity = light_on ? 2.0 / length(fs_in.position.xy - light_position) : 1.0f;
	
	vec4 tex_color = fs_in.color;
	vec4 sampled;
	if (fs_in.tid > 0.0)
	{
		int tid = int(fs_in.tid - 0.5);
		tex_color =  fs_in.color * texture2D(textures[tid], fs_in.uv.xy);
		sampled = vec4(1, 1, 1, texture2D(textures[tid], fs_in.uv.xy).r);
	}
    gl_FragColor = tex_color * intensity;
}